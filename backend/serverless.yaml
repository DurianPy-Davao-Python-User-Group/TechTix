service: sparcs-events-api

custom:
  projectName: sparcs-events
  serviceName: events
  stage: ${opt:stage, self:provider.stage}
  entities: ${self:custom.stage}-${self:custom.projectName}-entities
  bucket: ${self:custom.stage}-${self:custom.projectName}-bucket
  registrations: ${self:custom.stage}-${self:custom.projectName}-registrations
  evaluations: ${self:custom.stage}-${self:custom.projectName}-evaluations
  emailQueue:
    !ImportValue EmailQueue-${self:custom.stage}
  basicAuthorizerARN:
    !ImportValue BasicAuthAuthorizerARN-${self:custom.stage}
  pythonRequirements:
    dockerizePip: non-linux
    layer:
      name: sparcs-events-${self:custom.stage}-python-requirements
      path: .
      compatibleRuntimes:
        - python3.8

package: ${file(resources/package.yml)}

provider:
  name: aws
  runtime: python3.8
  stage: dev
  region: ap-southeast-1
  memorySize: 3008
  versionFunctions: false
  timeout: 30
  apiGateway:
    resourcePolicy:
      - Effect: Allow
        Action: execute-api:Invoke
        Principal: "*"
        Resource: execute-api:/*/*/*
  environment:
    REGION: ${self:provider.region}
    STAGE: ${self:custom.stage}
    ENTITIES_TABLE: ${self:custom.entities}
    REGISTRATIONS_TABLE: ${self:custom.registrations}
    EVALUATIONS_TABLE: ${self:custom.evaluations}
    EMAIL_QUEUE: ${self:custom.emailQueue}
    S3_BUCKET: ${self:custom.bucket}
    USER_POOL_ID:
      !ImportValue UserPoolId-${self:custom.stage}
    USER_POOL_CLIENT_ID:
      !ImportValue AppClientId-${self:custom.stage}
    SPARCS_GMAIL: sparcsup@gmail.com
  logs:
    restApi: true

resources:
  - ${file(resources/dynamodb.yml)}
  - ${file(resources/api_gateway.yml)}
  - ${file(resources/s3.yml)}

functions:
  - ${file(resources/api.yml)}
  # - ${file(resources/functions.yml)}

plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function
